mutation CreateUser(
  $id: String!
  $firstName: String!
  $lastName: String!
  $email: String!
) @auth(level: USER) {
  user_insert(
    data: { id: $id, firstName: $firstName, lastName: $lastName, email: $email }
  )
}

mutation AddNewsletterSignUp($email: String!) @auth(level: PUBLIC) {
  newsletter_insert(data: { email: $email })
}

mutation CreateOrg($orgName: String!, $orgStatus: String!)
@auth(level: PUBLIC) {
  orginization_insert(data: { name: $orgName, status: $orgStatus })
}

mutation AddUserToOrg($orginizationId: UUID!) @auth(level: USER) {
  user_update(
    first: { where: { id: { eq_expr: "auth.uid" } } }
    data: { id_expr: "auth.uid", orginizationId: $orginizationId }
  )
}

# # Upsert (update or insert) a user's username based on their auth.uid
# mutation UpsertUser($username: String!) @auth(level: USER) {
#   # The "auth.uid" server value ensures that users can only register their own user.
#   user_upsert(data: { id_expr: "auth.uid", username: $username })
# }

# # Add a review for a movie
# mutation AddReview($movieId: UUID!, $rating: Int!, $reviewText: String!)
# @auth(level: USER) {
#   review_upsert(
#     data: {
#       userId_expr: "auth.uid"
#       movieId: $movieId
#       rating: $rating
#       reviewText: $reviewText
#       # reviewDate defaults to today in the schema. No need to set it manually.
#     }
#   )
# }

# # Logged in user can delete their review for a movie
# mutation DeleteReview($movieId: UUID!) @auth(level: USER) {
#   # The "auth.uid" server value ensures that users can only delete their own reviews.
#   review_delete(key: { userId_expr: "auth.uid", movieId: $movieId })
# }
