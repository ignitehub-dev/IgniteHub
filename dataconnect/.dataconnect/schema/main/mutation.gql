extend type Mutation {
  """
  ✨ Insert a single `Newsletter` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  newsletter_insert(
    """
    Data object to insert into the table.
    """
    data: Newsletter_Data!
  ): Newsletter_KeyOutput! @fdc_generated(from: "Newsletter", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Project` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  project_insert(
    """
    Data object to insert into the table.
    """
    data: Project_Data!
  ): Project_KeyOutput! @fdc_generated(from: "Project", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `ProjectMembership` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  projectMembership_insert(
    """
    Data object to insert into the table.
    """
    data: ProjectMembership_Data!
  ): ProjectMembership_KeyOutput! @fdc_generated(from: "ProjectMembership", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Newsletter` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  newsletter_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Newsletter_Data!]!
  ): [Newsletter_KeyOutput!]! @fdc_generated(from: "Newsletter", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Project` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  project_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Project_Data!]!
  ): [Project_KeyOutput!]! @fdc_generated(from: "Project", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `ProjectMembership` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  projectMembership_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [ProjectMembership_Data!]!
  ): [ProjectMembership_KeyOutput!]! @fdc_generated(from: "ProjectMembership", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Newsletter` into the table, based on the primary key. Returns the key of the newly inserted `Newsletter`.
  """
  newsletter_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Newsletter_Data!
  ): Newsletter_KeyOutput! @fdc_generated(from: "Newsletter", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Project` into the table, based on the primary key. Returns the key of the newly inserted `Project`.
  """
  project_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Project_Data!
  ): Project_KeyOutput! @fdc_generated(from: "Project", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `ProjectMembership` into the table, based on the primary key. Returns the key of the newly inserted `ProjectMembership`.
  """
  projectMembership_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: ProjectMembership_Data!
  ): ProjectMembership_KeyOutput! @fdc_generated(from: "ProjectMembership", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Newsletter` objects into the table, based on the primary key. Returns the key of the newly inserted `Newsletter`.
  """
  newsletter_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Newsletter_Data!]!
  ): [Newsletter_KeyOutput!]! @fdc_generated(from: "Newsletter", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Project` objects into the table, based on the primary key. Returns the key of the newly inserted `Project`.
  """
  project_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Project_Data!]!
  ): [Project_KeyOutput!]! @fdc_generated(from: "Project", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `ProjectMembership` objects into the table, based on the primary key. Returns the key of the newly inserted `ProjectMembership`.
  """
  projectMembership_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [ProjectMembership_Data!]!
  ): [ProjectMembership_KeyOutput!]! @fdc_generated(from: "ProjectMembership", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Newsletter` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  newsletter_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Newsletter_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Newsletter_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Newsletter_Data!
  ): Newsletter_KeyOutput @fdc_generated(from: "Newsletter", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Project` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  project_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Project_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Project_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Project_Data!
  ): Project_KeyOutput @fdc_generated(from: "Project", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `ProjectMembership` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  projectMembership_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ProjectMembership_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ProjectMembership_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: ProjectMembership_Data!
  ): ProjectMembership_KeyOutput @fdc_generated(from: "ProjectMembership", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Newsletter` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  newsletter_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Newsletter_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Newsletter_Data!
  ): Int! @fdc_generated(from: "Newsletter", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Project` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  project_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Project_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Project_Data!
  ): Int! @fdc_generated(from: "Project", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `ProjectMembership` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  projectMembership_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: ProjectMembership_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: ProjectMembership_Data!
  ): Int! @fdc_generated(from: "ProjectMembership", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Newsletter` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  newsletter_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Newsletter_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Newsletter_FirstRow
  ): Newsletter_KeyOutput @fdc_generated(from: "Newsletter", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Project` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  project_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Project_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Project_FirstRow
  ): Project_KeyOutput @fdc_generated(from: "Project", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `ProjectMembership` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  projectMembership_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ProjectMembership_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ProjectMembership_FirstRow
  ): ProjectMembership_KeyOutput @fdc_generated(from: "ProjectMembership", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Newsletter` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  newsletter_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Newsletter_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Newsletter", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Project` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  project_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Project_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Project", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `ProjectMembership` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  projectMembership_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: ProjectMembership_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "ProjectMembership", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
